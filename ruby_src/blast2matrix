#!/usr/bin/env ruby
#
# = NAME
#
# blast2matrix
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'optparse'

DISTANCES = {
  'orfs' => { 
    'call' => :nullcall, 
    'desc' => 'Distance matrix between individual orfs',
    'mandopts' => [ ]
  },
  'contigs' => { 
    'call' => :contigscall, 
    'desc' => 'Distance matrix between contigs calculated as the mean of included orfs',
    'mandopts' => [ ]
  }
}
DEFAULT_DISTANCE = 'orfs'

def distances(distance = false)
  if distance and DISTANCES[distance]
    "#{distance}: #{DISTANCES[distance]['desc']}\n"
  elsif distance and distance != ''
    "Format #{distance} not supported\n"
  else
    "Supported distances:\n\t" + DISTANCES.keys.sort.map { |f| "#{f}#{ f == DEFAULT_DISTANCE ? ' * default *' : ''}" }.join("\n\t") + "\n"
  end
end

FORMATS = {
  'tsv' => {
    'call' => :tsvcall,
    'desc' => 'Tab separated table',
    'mandopts' => [ ]
  }
}
DEFAULT_FORMAT = 'tsv'

def formats(format = false)
  if format and FORMATS[format]
    "#{format}: #{FORMATS[format]['desc']}\n"
  elsif format and format != ''
    "Format #{format} not supported\n"
  else
    "Supported formats:\n\t" + FORMATS.keys.sort.map { |f| "#{f}#{ f == DEFAULT_FORMAT ? ' * default *' : ''}" }.join("\n\t") + "\n"
  end
end

SIM2DISTS = {
  'one_minus' => {
    'call' => :one_minuscall,
    'desc' => '1 minus identity fraction',
    'mandopts' => [ ]
  }
}
DEFAULT_SIM2DIST = 'one_minus'

def sim2dists(sim2dist = false)
  if sim2dist and SIM2DISTS[sim2dist]
    "#{sim2dist}: #{SIM2DISTS[sim2dist]['desc']}\n"
  elsif sim2dist and sim2dist != ''
    "Format #{sim2dist} not supported\n"
  else
    "Supported sim2dists:\n\t" + SIM2DISTS.keys.sort.map { |f| "#{f}#{ f == DEFAULT_SIM2DIST ? ' * default *' : ''}" }.join("\n\t") + "\n"
  end
end

SYMMETRIES = {
  'no' => {
    'call' => :nullcall,
    'desc' => 'No operation to make matrix symmetrical performed',
    'mandopts' => [ ]
  },
  'max' => {
    'call' => :maxsymcall,
    'desc' => 'Calculate the max of the two pairwise distances to make matrix symmetrical',
    'mandopts' => [ ]
  },
  'mean' => {
    'call' => :meansymcall,
    'desc' => 'Calculate the mean of the two pairwise distances to make matrix symmetrical',
    'mandopts' => [ ]
  },
  'min' => {
    'call' => :minsymcall,
    'desc' => 'Calculate the min of the two pairwise distances to make matrix symmetrical',
    'mandopts' => [ ]
  },
}
DEFAULT_SYMMETRY = 'no'

def symmetries(symmetry = false)
  if symmetry and SYMMETRIES[symmetry]
    "#{symmetry}: #{SYMMETRIES[symmetry]['desc']}\n"
  elsif symmetry and symmetry != ''
    "Format #{symmetry} not supported\n"
  else
    "Supported symmetries:\n\t" + SYMMETRIES.keys.sort.map { |f| "#{f}#{ f == DEFAULT_SYMMETRY ? ' * default *' : ''}" }.join("\n\t") + "\n"
  end
end

@options = {
  :distance => DEFAULT_DISTANCE,
  :format => DEFAULT_FORMAT,
  :sim2dist => DEFAULT_SIM2DIST,
  :symmetry => DEFAULT_SYMMETRY
}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER

blast2matrix: Converts a blast8 formated file to a distance matrix.  
  The distance matrix can either be between the sequences in the file
  (--distances='orfs') or between higher level entities containing the
  sequences in the file (--distances='contigs'). In the latter case, which 
  orfs to group into a contig needs to be specified by **HOW**?

  blast2matrix [options] file0..filen
BANNER

  opts.on "--distance=distance", "Algorithm for distance calculation from fraction identity #{DEFAULT_DISTANCE}"  do |v| 
    @options[:distance] = v 
  end

  opts.on "--distances[=v]", "Lists available distance calculation algorithms or, with a distance name as parameter, writes a description of a distance algorithm"  do |v|
    puts distances v 
    exit 0
  end

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "--format=format", "Output format, default #{DEFAULT_FORMAT}"  do |v| 
    @options[:format] = v 
  end

  opts.on "--formats[=v]", "Lists available output formats or, with a format as parameter, writes a description of a format"  do |v|
    puts formats v 
    exit 0
  end

  opts.on "--sim2dist=sim2dist", "Algorithm to convert from similarity (fraction identity) to distances, default #{DEFAULT_SIM2DIST}"  do |v| 
    @options[:sim2dist] = v 
  end

  opts.on "--sim2dists[=v]", "Lists available algorithms for conversion from identity fractions to distances, or, with a sim2dist as parameter, writes a description of a sim2dist"  do |v|
    puts sim2dists v 
    exit 0
  end

  opts.on "--symmetry=symmetry", "Algorithm to convert from similarity (fraction identity) to distances, default #{DEFAULT_SYMMETRY}"  do |v| 
    @options[:symmetry] = v 
  end

  opts.on "--symmetries[=v]", "Lists available algorithms for conversion from identity fractions to distances, or, with a symmetry as parameter, writes a description of a symmetry"  do |v|
    puts symmetries v 
    exit 0
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end
begin
  opt_parser.parse!
  mandatory = [ ]	# Fill in with mandatory option names (i.e. starting with :)
  mandatory += FORMATS[@options[:format]]['mandopts'] 
  mandatory += DISTANCES[@options[:distance]]['mandopts']
  mandatory += SIM2DISTS[@options[:sim2dist]]['mandopts']
  mandatory += SYMMETRIES[@options[:symmetry]]['mandopts']
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

### Functions that performs various modifications to data. Which one is called
### depends on command line arguments.

# This one does nothing
def nullcall(data)
  return data
end

# Calculates distances between higher order entities, e.g. contigs, containing
# several of the atomic entities, orfs.
def contigscall(data)
end

# Calculate distances from similarities by taking 1 minus the similarity
def one_minuscall(data)
  rtn = { }	# We will return a hash of hashes where each pair of sequences point to the distance between them

  # First, we need the lengths. Can be found as the hit between each sequence and itself
  # (might be problematic if blast was run with filters).
  lens = { }
  data.keys.uniq.each do |key|
    lens[key] = 0
    data[key][key].each do |r|
      lens[key] += r[:len]
    end
  end

  # Now we can calculate the matrix
  data.keys.uniq.each do |seq0|
    data.keys.uniq.each do |seq1|
      n_id = 0.0
      if hits = data[seq0][seq1]
	# Calculate overall % identity, first count all identities and sum over all hits
	hits.each do |hit|
	  n_id += hit[:id]*hit[:len]
	end
      end
      rtn[seq0] ||= { }
      rtn[seq0][seq1] = 1 - n_id/lens[seq0]
    end
  end
      
  return rtn
end

# Helper method for the various symmetry functions
def _symcall(data)
  rtn = { }
  data.keys.uniq.each do |seq0|
    rtn[seq0] ||= { }
    data.keys.uniq.each do |seq1|
      unless rtn[seq0][seq1]
	m = yield data[seq0][seq1], data[seq1][seq0]
	rtn[seq0][seq1] = m
	rtn[seq1] ||= { }
	rtn[seq1][seq0] = m
      end
    end
  end
  return rtn
end

# Returns a symmetric matrix based on the maximum pairwise distance
def maxsymcall(data)
  return _symcall(data) { |d0, d1| [ d0, d1 ].max }
end

# Returns a symmetric matrix based on the mean pairwise distance
def meansymcall(data)
  return _symcall(data) { |d0, d1| (d0+d1)/2 }
end

# Returns a symmetric matrix based on the minimum pairwise distance
def minsymcall(data)
  return _symcall(data) { |d0, d1| [ d0, d1 ].min }
end

# Print out the matrix i tab separated format
def tsvcall(data)
  puts "\t" + data.keys.sort.join("\t")
  data.keys.sort.each do |s0|
    d = [ ]
    data.keys.sort.each do |s1|
      d << data[s0][s1]
    end
    puts "#{s0}\t" + d.join("\t")
  end
end

unless FORMATS.keys.find { |f| f == @options[:format] }
  warn "Format #{@options[:format]} unsupported"
  warn formats
  exit 1
end

# Loop over infiles
data = { }
begin
  file = nil
  ARGV.each do |file|
    if file == '-'
      warn "Parsing STDIN" if @options[:verbose]
      io = STDIN
    else
      warn "Parsing #{file}" if @options[:verbose]
      if file =~ /.gz$/
	io = IO.popen("gunzip -c #{file}", "r")
      elsif file =~ /.bz2$/

	io = IO.popen("bunzip2 -c #{file}", "r")
      else
	io = File.new(file)
      end
    end
    io.each do |line|
      line.sub!(/\s*#.*/, '')
      next if line =~ /^$/
      fields = line.chomp.split(/\s+/)
      data[fields[0]] ||= { }
      data[fields[0]][fields[1]] ||= [ ]
      data[fields[0]][fields[1]] << {
	id:         fields[2].to_f/100.0, len:      fields[3].to_i,
	mismatches: fields[4].to_i      , gapopens: fields[5].to_i,
	qstart:     fields[6].to_i      , qend:     fields[7].to_i,
	sstart:     fields[8].to_i      , send:     fields[9].to_i,
	evalue:     fields[9].to_f      , bitscore: fields[10].to_f
      }
    end
  end
rescue
  warn "Failed to process file '#{file}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
end

# Convert similarities to distances
matrix = self.method(SIM2DISTS[@options[:sim2dist]]['call']).call(data)

# Convert the matrix to represent distances between the specified entities
matrix = self.method(DISTANCES[@options[:distance]]['call']).call(matrix)

# Make symmetric
matrix = self.method(SYMMETRIES[@options[:symmetry]]['call']).call(matrix)

# Print out the data
self.method(FORMATS[@options[:format]]['call']).call(matrix)
